// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package db

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (root_id, name, command, params)
VALUES (?, ?, ?, ?)
RETURNING id, root_id, name, command, params, created_at, updated_at
`

type CreateAgentParams struct {
	RootID  int64  `db:"root_id" json:"root_id"`
	Name    string `db:"name" json:"name"`
	Command string `db:"command" json:"command"`
	Params  string `db:"params" json:"params"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.RootID,
		arg.Name,
		arg.Command,
		arg.Params,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.RootID,
		&i.Name,
		&i.Command,
		&i.Params,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents WHERE id = ?
`

func (q *Queries) DeleteAgent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAgent, id)
	return err
}

const getAgent = `-- name: GetAgent :one
SELECT id, root_id, name, command, params, created_at, updated_at FROM agents
WHERE id = ?
`

func (q *Queries) GetAgent(ctx context.Context, id int64) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.RootID,
		&i.Name,
		&i.Command,
		&i.Params,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentsByRootID = `-- name: GetAgentsByRootID :many
SELECT id, root_id, name, command, params, created_at, updated_at FROM agents
WHERE root_id = ?
ORDER BY name
`

func (q *Queries) GetAgentsByRootID(ctx context.Context, rootID int64) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, getAgentsByRootID, rootID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.RootID,
			&i.Name,
			&i.Command,
			&i.Params,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agents
SET name = ?, command = ?, params = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, root_id, name, command, params, created_at, updated_at
`

type UpdateAgentParams struct {
	Name    string `db:"name" json:"name"`
	Command string `db:"command" json:"command"`
	Params  string `db:"params" json:"params"`
	ID      int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, updateAgent,
		arg.Name,
		arg.Command,
		arg.Params,
		arg.ID,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.RootID,
		&i.Name,
		&i.Command,
		&i.Params,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
