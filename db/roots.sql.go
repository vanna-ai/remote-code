// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roots.sql

package db

import (
	"context"
	"database/sql"
)

const createRoot = `-- name: CreateRoot :one
INSERT INTO roots (local_port, external_url)
VALUES (?, ?)
RETURNING id, local_port, external_url, created_at, updated_at
`

type CreateRootParams struct {
	LocalPort   string         `db:"local_port" json:"local_port"`
	ExternalUrl sql.NullString `db:"external_url" json:"external_url"`
}

func (q *Queries) CreateRoot(ctx context.Context, arg CreateRootParams) (Root, error) {
	row := q.db.QueryRowContext(ctx, createRoot, arg.LocalPort, arg.ExternalUrl)
	var i Root
	err := row.Scan(
		&i.ID,
		&i.LocalPort,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoot = `-- name: DeleteRoot :exec
DELETE FROM roots WHERE id = ?
`

func (q *Queries) DeleteRoot(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoot, id)
	return err
}

const getRoot = `-- name: GetRoot :one
SELECT id, local_port, external_url, created_at, updated_at FROM roots
WHERE id = ?
`

func (q *Queries) GetRoot(ctx context.Context, id int64) (Root, error) {
	row := q.db.QueryRowContext(ctx, getRoot, id)
	var i Root
	err := row.Scan(
		&i.ID,
		&i.LocalPort,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRootWithAgentsAndProjects = `-- name: GetRootWithAgentsAndProjects :one
SELECT 
    r.id,
    r.local_port,
    r.external_url,
    r.created_at,
    r.updated_at
FROM roots r
WHERE r.id = ?
`

func (q *Queries) GetRootWithAgentsAndProjects(ctx context.Context, id int64) (Root, error) {
	row := q.db.QueryRowContext(ctx, getRootWithAgentsAndProjects, id)
	var i Root
	err := row.Scan(
		&i.ID,
		&i.LocalPort,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRoot = `-- name: UpdateRoot :one
UPDATE roots
SET local_port = ?, external_url = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, local_port, external_url, created_at, updated_at
`

type UpdateRootParams struct {
	LocalPort   string         `db:"local_port" json:"local_port"`
	ExternalUrl sql.NullString `db:"external_url" json:"external_url"`
	ID          int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateRoot(ctx context.Context, arg UpdateRootParams) (Root, error) {
	row := q.db.QueryRowContext(ctx, updateRoot, arg.LocalPort, arg.ExternalUrl, arg.ID)
	var i Root
	err := row.Scan(
		&i.ID,
		&i.LocalPort,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
