// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: base_directories.sql

package db

import (
	"context"
)

const createBaseDirectory = `-- name: CreateBaseDirectory :one
INSERT INTO base_directories (
    project_id, 
    base_directory_id, 
    path, 
    git_initialized,
    worktree_setup_commands,
    worktree_teardown_commands,
    dev_server_setup_commands,
    dev_server_teardown_commands
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, project_id, base_directory_id, path, git_initialized, worktree_setup_commands, worktree_teardown_commands, dev_server_setup_commands, dev_server_teardown_commands, created_at, updated_at
`

type CreateBaseDirectoryParams struct {
	ProjectID                 int64  `db:"project_id" json:"project_id"`
	BaseDirectoryID           string `db:"base_directory_id" json:"base_directory_id"`
	Path                      string `db:"path" json:"path"`
	GitInitialized            bool   `db:"git_initialized" json:"git_initialized"`
	WorktreeSetupCommands     string `db:"worktree_setup_commands" json:"worktree_setup_commands"`
	WorktreeTeardownCommands  string `db:"worktree_teardown_commands" json:"worktree_teardown_commands"`
	DevServerSetupCommands    string `db:"dev_server_setup_commands" json:"dev_server_setup_commands"`
	DevServerTeardownCommands string `db:"dev_server_teardown_commands" json:"dev_server_teardown_commands"`
}

func (q *Queries) CreateBaseDirectory(ctx context.Context, arg CreateBaseDirectoryParams) (BaseDirectory, error) {
	row := q.db.QueryRowContext(ctx, createBaseDirectory,
		arg.ProjectID,
		arg.BaseDirectoryID,
		arg.Path,
		arg.GitInitialized,
		arg.WorktreeSetupCommands,
		arg.WorktreeTeardownCommands,
		arg.DevServerSetupCommands,
		arg.DevServerTeardownCommands,
	)
	var i BaseDirectory
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.GitInitialized,
		&i.WorktreeSetupCommands,
		&i.WorktreeTeardownCommands,
		&i.DevServerSetupCommands,
		&i.DevServerTeardownCommands,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBaseDirectory = `-- name: DeleteBaseDirectory :exec
DELETE FROM base_directories WHERE id = ?
`

func (q *Queries) DeleteBaseDirectory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBaseDirectory, id)
	return err
}

const getBaseDirectoriesByProjectID = `-- name: GetBaseDirectoriesByProjectID :many
SELECT id, project_id, base_directory_id, path, git_initialized, worktree_setup_commands, worktree_teardown_commands, dev_server_setup_commands, dev_server_teardown_commands, created_at, updated_at FROM base_directories
WHERE project_id = ?
ORDER BY base_directory_id
`

func (q *Queries) GetBaseDirectoriesByProjectID(ctx context.Context, projectID int64) ([]BaseDirectory, error) {
	rows, err := q.db.QueryContext(ctx, getBaseDirectoriesByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BaseDirectory
	for rows.Next() {
		var i BaseDirectory
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.BaseDirectoryID,
			&i.Path,
			&i.GitInitialized,
			&i.WorktreeSetupCommands,
			&i.WorktreeTeardownCommands,
			&i.DevServerSetupCommands,
			&i.DevServerTeardownCommands,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBaseDirectory = `-- name: GetBaseDirectory :one
SELECT id, project_id, base_directory_id, path, git_initialized, worktree_setup_commands, worktree_teardown_commands, dev_server_setup_commands, dev_server_teardown_commands, created_at, updated_at FROM base_directories
WHERE id = ?
`

func (q *Queries) GetBaseDirectory(ctx context.Context, id int64) (BaseDirectory, error) {
	row := q.db.QueryRowContext(ctx, getBaseDirectory, id)
	var i BaseDirectory
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.GitInitialized,
		&i.WorktreeSetupCommands,
		&i.WorktreeTeardownCommands,
		&i.DevServerSetupCommands,
		&i.DevServerTeardownCommands,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBaseDirectoryByProjectAndID = `-- name: GetBaseDirectoryByProjectAndID :one
SELECT id, project_id, base_directory_id, path, git_initialized, worktree_setup_commands, worktree_teardown_commands, dev_server_setup_commands, dev_server_teardown_commands, created_at, updated_at FROM base_directories
WHERE project_id = ? AND base_directory_id = ?
`

type GetBaseDirectoryByProjectAndIDParams struct {
	ProjectID       int64  `db:"project_id" json:"project_id"`
	BaseDirectoryID string `db:"base_directory_id" json:"base_directory_id"`
}

func (q *Queries) GetBaseDirectoryByProjectAndID(ctx context.Context, arg GetBaseDirectoryByProjectAndIDParams) (BaseDirectory, error) {
	row := q.db.QueryRowContext(ctx, getBaseDirectoryByProjectAndID, arg.ProjectID, arg.BaseDirectoryID)
	var i BaseDirectory
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.GitInitialized,
		&i.WorktreeSetupCommands,
		&i.WorktreeTeardownCommands,
		&i.DevServerSetupCommands,
		&i.DevServerTeardownCommands,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBaseDirectory = `-- name: UpdateBaseDirectory :one
UPDATE base_directories
SET 
    path = ?,
    git_initialized = ?,
    worktree_setup_commands = ?,
    worktree_teardown_commands = ?,
    dev_server_setup_commands = ?,
    dev_server_teardown_commands = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, project_id, base_directory_id, path, git_initialized, worktree_setup_commands, worktree_teardown_commands, dev_server_setup_commands, dev_server_teardown_commands, created_at, updated_at
`

type UpdateBaseDirectoryParams struct {
	Path                      string `db:"path" json:"path"`
	GitInitialized            bool   `db:"git_initialized" json:"git_initialized"`
	WorktreeSetupCommands     string `db:"worktree_setup_commands" json:"worktree_setup_commands"`
	WorktreeTeardownCommands  string `db:"worktree_teardown_commands" json:"worktree_teardown_commands"`
	DevServerSetupCommands    string `db:"dev_server_setup_commands" json:"dev_server_setup_commands"`
	DevServerTeardownCommands string `db:"dev_server_teardown_commands" json:"dev_server_teardown_commands"`
	ID                        int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateBaseDirectory(ctx context.Context, arg UpdateBaseDirectoryParams) (BaseDirectory, error) {
	row := q.db.QueryRowContext(ctx, updateBaseDirectory,
		arg.Path,
		arg.GitInitialized,
		arg.WorktreeSetupCommands,
		arg.WorktreeTeardownCommands,
		arg.DevServerSetupCommands,
		arg.DevServerTeardownCommands,
		arg.ID,
	)
	var i BaseDirectory
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.GitInitialized,
		&i.WorktreeSetupCommands,
		&i.WorktreeTeardownCommands,
		&i.DevServerSetupCommands,
		&i.DevServerTeardownCommands,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
