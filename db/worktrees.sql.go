// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: worktrees.sql

package db

import (
	"context"
	"database/sql"
)

const createWorktree = `-- name: CreateWorktree :one
INSERT INTO worktrees (base_directory_id, path, agent_tmux_id, dev_server_tmux_id, external_url)
VALUES (?, ?, ?, ?, ?)
RETURNING id, base_directory_id, path, agent_tmux_id, dev_server_tmux_id, external_url, created_at, updated_at
`

type CreateWorktreeParams struct {
	BaseDirectoryID string         `db:"base_directory_id" json:"base_directory_id"`
	Path            string         `db:"path" json:"path"`
	AgentTmuxID     sql.NullString `db:"agent_tmux_id" json:"agent_tmux_id"`
	DevServerTmuxID sql.NullString `db:"dev_server_tmux_id" json:"dev_server_tmux_id"`
	ExternalUrl     sql.NullString `db:"external_url" json:"external_url"`
}

func (q *Queries) CreateWorktree(ctx context.Context, arg CreateWorktreeParams) (Worktree, error) {
	row := q.db.QueryRowContext(ctx, createWorktree,
		arg.BaseDirectoryID,
		arg.Path,
		arg.AgentTmuxID,
		arg.DevServerTmuxID,
		arg.ExternalUrl,
	)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.AgentTmuxID,
		&i.DevServerTmuxID,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorktree = `-- name: DeleteWorktree :exec
DELETE FROM worktrees WHERE id = ?
`

func (q *Queries) DeleteWorktree(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWorktree, id)
	return err
}

const getWorktree = `-- name: GetWorktree :one
SELECT id, base_directory_id, path, agent_tmux_id, dev_server_tmux_id, external_url, created_at, updated_at FROM worktrees
WHERE id = ?
`

func (q *Queries) GetWorktree(ctx context.Context, id int64) (Worktree, error) {
	row := q.db.QueryRowContext(ctx, getWorktree, id)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.AgentTmuxID,
		&i.DevServerTmuxID,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorktreesByBaseDirectoryID = `-- name: GetWorktreesByBaseDirectoryID :many
SELECT id, base_directory_id, path, agent_tmux_id, dev_server_tmux_id, external_url, created_at, updated_at FROM worktrees
WHERE base_directory_id = ?
ORDER BY path
`

func (q *Queries) GetWorktreesByBaseDirectoryID(ctx context.Context, baseDirectoryID string) ([]Worktree, error) {
	rows, err := q.db.QueryContext(ctx, getWorktreesByBaseDirectoryID, baseDirectoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worktree
	for rows.Next() {
		var i Worktree
		if err := rows.Scan(
			&i.ID,
			&i.BaseDirectoryID,
			&i.Path,
			&i.AgentTmuxID,
			&i.DevServerTmuxID,
			&i.ExternalUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorktree = `-- name: UpdateWorktree :one
UPDATE worktrees
SET 
    path = ?,
    agent_tmux_id = ?,
    dev_server_tmux_id = ?,
    external_url = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, base_directory_id, path, agent_tmux_id, dev_server_tmux_id, external_url, created_at, updated_at
`

type UpdateWorktreeParams struct {
	Path            string         `db:"path" json:"path"`
	AgentTmuxID     sql.NullString `db:"agent_tmux_id" json:"agent_tmux_id"`
	DevServerTmuxID sql.NullString `db:"dev_server_tmux_id" json:"dev_server_tmux_id"`
	ExternalUrl     sql.NullString `db:"external_url" json:"external_url"`
	ID              int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateWorktree(ctx context.Context, arg UpdateWorktreeParams) (Worktree, error) {
	row := q.db.QueryRowContext(ctx, updateWorktree,
		arg.Path,
		arg.AgentTmuxID,
		arg.DevServerTmuxID,
		arg.ExternalUrl,
		arg.ID,
	)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.BaseDirectoryID,
		&i.Path,
		&i.AgentTmuxID,
		&i.DevServerTmuxID,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
