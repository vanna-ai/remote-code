// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (project_id, title, description, worktree_id)
VALUES (?, ?, ?, ?)
RETURNING id, project_id, title, description, worktree_id, created_at, updated_at
`

type CreateTaskParams struct {
	ProjectID   int64         `db:"project_id" json:"project_id"`
	Title       string        `db:"title" json:"title"`
	Description string        `db:"description" json:"description"`
	WorktreeID  sql.NullInt64 `db:"worktree_id" json:"worktree_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ProjectID,
		arg.Title,
		arg.Description,
		arg.WorktreeID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Description,
		&i.WorktreeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, project_id, title, description, worktree_id, created_at, updated_at FROM tasks
WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Description,
		&i.WorktreeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskWithWorktree = `-- name: GetTaskWithWorktree :one
SELECT 
    t.id, t.project_id, t.title, t.description, t.worktree_id, t.created_at, t.updated_at,
    w.base_directory_id,
    w.path as worktree_path,
    w.agent_tmux_id,
    w.dev_server_tmux_id,
    w.external_url as worktree_external_url
FROM tasks t
LEFT JOIN worktrees w ON t.worktree_id = w.id
WHERE t.id = ?
`

type GetTaskWithWorktreeRow struct {
	ID                  int64          `db:"id" json:"id"`
	ProjectID           int64          `db:"project_id" json:"project_id"`
	Title               string         `db:"title" json:"title"`
	Description         string         `db:"description" json:"description"`
	WorktreeID          sql.NullInt64  `db:"worktree_id" json:"worktree_id"`
	CreatedAt           sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt           sql.NullTime   `db:"updated_at" json:"updated_at"`
	BaseDirectoryID     sql.NullString `db:"base_directory_id" json:"base_directory_id"`
	WorktreePath        sql.NullString `db:"worktree_path" json:"worktree_path"`
	AgentTmuxID         sql.NullString `db:"agent_tmux_id" json:"agent_tmux_id"`
	DevServerTmuxID     sql.NullString `db:"dev_server_tmux_id" json:"dev_server_tmux_id"`
	WorktreeExternalUrl sql.NullString `db:"worktree_external_url" json:"worktree_external_url"`
}

func (q *Queries) GetTaskWithWorktree(ctx context.Context, id int64) (GetTaskWithWorktreeRow, error) {
	row := q.db.QueryRowContext(ctx, getTaskWithWorktree, id)
	var i GetTaskWithWorktreeRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Description,
		&i.WorktreeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BaseDirectoryID,
		&i.WorktreePath,
		&i.AgentTmuxID,
		&i.DevServerTmuxID,
		&i.WorktreeExternalUrl,
	)
	return i, err
}

const getTasksByProjectID = `-- name: GetTasksByProjectID :many
SELECT id, project_id, title, description, worktree_id, created_at, updated_at FROM tasks
WHERE project_id = ?
ORDER BY title
`

func (q *Queries) GetTasksByProjectID(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Description,
			&i.WorktreeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
    title = ?,
    description = ?,
    worktree_id = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, project_id, title, description, worktree_id, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string        `db:"title" json:"title"`
	Description string        `db:"description" json:"description"`
	WorktreeID  sql.NullInt64 `db:"worktree_id" json:"worktree_id"`
	ID          int64         `db:"id" json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.WorktreeID,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Description,
		&i.WorktreeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
