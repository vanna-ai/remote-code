// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (project_id, base_directory_id, title, description, status)
VALUES (?, ?, ?, ?, ?)
RETURNING id, project_id, base_directory_id, title, description, status, created_at, updated_at
`

type CreateTaskParams struct {
	ProjectID       int64  `db:"project_id" json:"project_id"`
	BaseDirectoryID string `db:"base_directory_id" json:"base_directory_id"`
	Title           string `db:"title" json:"title"`
	Description     string `db:"description" json:"description"`
	Status          string `db:"status" json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ProjectID,
		arg.BaseDirectoryID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, project_id, base_directory_id, title, description, status, created_at, updated_at FROM tasks
WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskWithBaseDirectory = `-- name: GetTaskWithBaseDirectory :one
SELECT 
    t.id, t.project_id, t.base_directory_id, t.title, t.description, t.status, t.created_at, t.updated_at,
    bd.path as base_directory_path,
    bd.git_initialized,
    bd.worktree_setup_commands,
    bd.worktree_teardown_commands,
    bd.dev_server_setup_commands,
    bd.dev_server_teardown_commands
FROM tasks t
JOIN base_directories bd ON t.base_directory_id = bd.base_directory_id
WHERE t.id = ?
`

type GetTaskWithBaseDirectoryRow struct {
	ID                        int64        `db:"id" json:"id"`
	ProjectID                 int64        `db:"project_id" json:"project_id"`
	BaseDirectoryID           string       `db:"base_directory_id" json:"base_directory_id"`
	Title                     string       `db:"title" json:"title"`
	Description               string       `db:"description" json:"description"`
	Status                    string       `db:"status" json:"status"`
	CreatedAt                 sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt                 sql.NullTime `db:"updated_at" json:"updated_at"`
	BaseDirectoryPath         string       `db:"base_directory_path" json:"base_directory_path"`
	GitInitialized            bool         `db:"git_initialized" json:"git_initialized"`
	WorktreeSetupCommands     string       `db:"worktree_setup_commands" json:"worktree_setup_commands"`
	WorktreeTeardownCommands  string       `db:"worktree_teardown_commands" json:"worktree_teardown_commands"`
	DevServerSetupCommands    string       `db:"dev_server_setup_commands" json:"dev_server_setup_commands"`
	DevServerTeardownCommands string       `db:"dev_server_teardown_commands" json:"dev_server_teardown_commands"`
}

func (q *Queries) GetTaskWithBaseDirectory(ctx context.Context, id int64) (GetTaskWithBaseDirectoryRow, error) {
	row := q.db.QueryRowContext(ctx, getTaskWithBaseDirectory, id)
	var i GetTaskWithBaseDirectoryRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BaseDirectoryPath,
		&i.GitInitialized,
		&i.WorktreeSetupCommands,
		&i.WorktreeTeardownCommands,
		&i.DevServerSetupCommands,
		&i.DevServerTeardownCommands,
	)
	return i, err
}

const getTasksByProjectID = `-- name: GetTasksByProjectID :many
SELECT id, project_id, base_directory_id, title, description, status, created_at, updated_at FROM tasks
WHERE project_id = ?
ORDER BY title
`

func (q *Queries) GetTasksByProjectID(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.BaseDirectoryID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
    title = ?,
    description = ?,
    status = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, project_id, base_directory_id, title, description, status, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
	Status      string `db:"status" json:"status"`
	ID          int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BaseDirectoryID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
