// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_executions.sql

package db

import (
	"context"
	"database/sql"
)

const createTaskExecution = `-- name: CreateTaskExecution :one
INSERT INTO task_executions (task_id, agent_id, worktree_id, status)
VALUES (?, ?, ?, ?)
RETURNING id, task_id, agent_id, worktree_id, status, created_at, updated_at
`

type CreateTaskExecutionParams struct {
	TaskID     int64  `db:"task_id" json:"task_id"`
	AgentID    int64  `db:"agent_id" json:"agent_id"`
	WorktreeID int64  `db:"worktree_id" json:"worktree_id"`
	Status     string `db:"status" json:"status"`
}

func (q *Queries) CreateTaskExecution(ctx context.Context, arg CreateTaskExecutionParams) (TaskExecution, error) {
	row := q.db.QueryRowContext(ctx, createTaskExecution,
		arg.TaskID,
		arg.AgentID,
		arg.WorktreeID,
		arg.Status,
	)
	var i TaskExecution
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.AgentID,
		&i.WorktreeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskExecution = `-- name: DeleteTaskExecution :exec
DELETE FROM task_executions WHERE id = ?
`

func (q *Queries) DeleteTaskExecution(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTaskExecution, id)
	return err
}

const getTaskExecution = `-- name: GetTaskExecution :one
SELECT id, task_id, agent_id, worktree_id, status, created_at, updated_at FROM task_executions
WHERE id = ?
`

func (q *Queries) GetTaskExecution(ctx context.Context, id int64) (TaskExecution, error) {
	row := q.db.QueryRowContext(ctx, getTaskExecution, id)
	var i TaskExecution
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.AgentID,
		&i.WorktreeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskExecutionWithDetails = `-- name: GetTaskExecutionWithDetails :one
SELECT 
    te.id, te.task_id, te.agent_id, te.worktree_id, te.status, te.created_at, te.updated_at,
    t.title as task_title,
    t.description as task_description,
    a.name as agent_name,
    a.command as agent_command,
    w.path as worktree_path,
    w.base_directory_id
FROM task_executions te
JOIN tasks t ON te.task_id = t.id
JOIN agents a ON te.agent_id = a.id
JOIN worktrees w ON te.worktree_id = w.id
WHERE te.id = ?
`

type GetTaskExecutionWithDetailsRow struct {
	ID              int64        `db:"id" json:"id"`
	TaskID          int64        `db:"task_id" json:"task_id"`
	AgentID         int64        `db:"agent_id" json:"agent_id"`
	WorktreeID      int64        `db:"worktree_id" json:"worktree_id"`
	Status          string       `db:"status" json:"status"`
	CreatedAt       sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt       sql.NullTime `db:"updated_at" json:"updated_at"`
	TaskTitle       string       `db:"task_title" json:"task_title"`
	TaskDescription string       `db:"task_description" json:"task_description"`
	AgentName       string       `db:"agent_name" json:"agent_name"`
	AgentCommand    string       `db:"agent_command" json:"agent_command"`
	WorktreePath    string       `db:"worktree_path" json:"worktree_path"`
	BaseDirectoryID string       `db:"base_directory_id" json:"base_directory_id"`
}

func (q *Queries) GetTaskExecutionWithDetails(ctx context.Context, id int64) (GetTaskExecutionWithDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getTaskExecutionWithDetails, id)
	var i GetTaskExecutionWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.AgentID,
		&i.WorktreeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TaskTitle,
		&i.TaskDescription,
		&i.AgentName,
		&i.AgentCommand,
		&i.WorktreePath,
		&i.BaseDirectoryID,
	)
	return i, err
}

const getTaskExecutionsByAgentID = `-- name: GetTaskExecutionsByAgentID :many
SELECT id, task_id, agent_id, worktree_id, status, created_at, updated_at FROM task_executions
WHERE agent_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetTaskExecutionsByAgentID(ctx context.Context, agentID int64) ([]TaskExecution, error) {
	rows, err := q.db.QueryContext(ctx, getTaskExecutionsByAgentID, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskExecution
	for rows.Next() {
		var i TaskExecution
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.AgentID,
			&i.WorktreeID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskExecutionsByTaskID = `-- name: GetTaskExecutionsByTaskID :many
SELECT id, task_id, agent_id, worktree_id, status, created_at, updated_at FROM task_executions
WHERE task_id = ?
ORDER BY created_at
`

func (q *Queries) GetTaskExecutionsByTaskID(ctx context.Context, taskID int64) ([]TaskExecution, error) {
	rows, err := q.db.QueryContext(ctx, getTaskExecutionsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskExecution
	for rows.Next() {
		var i TaskExecution
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.AgentID,
			&i.WorktreeID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskExecutions = `-- name: ListTaskExecutions :many
SELECT id, task_id, agent_id, worktree_id, status, created_at, updated_at FROM task_executions
ORDER BY created_at DESC
`

func (q *Queries) ListTaskExecutions(ctx context.Context) ([]TaskExecution, error) {
	rows, err := q.db.QueryContext(ctx, listTaskExecutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskExecution
	for rows.Next() {
		var i TaskExecution
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.AgentID,
			&i.WorktreeID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskExecutionStatus = `-- name: UpdateTaskExecutionStatus :one
UPDATE task_executions
SET 
    status = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, task_id, agent_id, worktree_id, status, created_at, updated_at
`

type UpdateTaskExecutionStatusParams struct {
	Status string `db:"status" json:"status"`
	ID     int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateTaskExecutionStatus(ctx context.Context, arg UpdateTaskExecutionStatusParams) (TaskExecution, error) {
	row := q.db.QueryRowContext(ctx, updateTaskExecutionStatus, arg.Status, arg.ID)
	var i TaskExecution
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.AgentID,
		&i.WorktreeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
